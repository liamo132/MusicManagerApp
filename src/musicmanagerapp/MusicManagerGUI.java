/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicmanagerapp;

/**
 *
 * @author liamf
 */
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import javax.swing.Timer;
import javax.swing.JOptionPane;

public class MusicManagerGUI extends javax.swing.JFrame {

    private MM musicManager; //MM class to manage arraylists
    List<Song> playlist = new ArrayList<>();
    private Stack<Song> lastAddedStack;
    private int currentIndex = 0; // this allows for "playing" liked playlist
    private Timer timer;

    /**
     * Creates new form MusicManager
     */
    public MusicManagerGUI() {
        initComponents();
        musicManager = new MM();
        lastAddedStack = new Stack<>();
    }

    private void playLikedPlaylist() {
        displayLikedTA.setText(""); // clear the display
        playBTNActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bckgrnd = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        titeLBL = new javax.swing.JLabel();
        genreLBL = new javax.swing.JLabel();
        titleTB = new javax.swing.JTextField();
        genreDRPDWN = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayHipHopTA = new javax.swing.JTextArea();
        addSongBTN = new javax.swing.JButton();
        searchSongBTN = new javax.swing.JButton();
        removeSongBTN = new javax.swing.JButton();
        rearangeSongBTN = new javax.swing.JButton();
        viewLBL = new javax.swing.JLabel();
        viewLikedBTN = new javax.swing.JButton();
        addPopBTN = new javax.swing.JButton();
        AddHipHiopBTN = new javax.swing.JButton();
        playBTN = new javax.swing.JButton();
        pauseBTN = new javax.swing.JButton();
        exitBTN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayLikedTA = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayPopTA = new javax.swing.JTextArea();
        popLBL = new javax.swing.JLabel();
        HipHopLBL = new javax.swing.JLabel();
        addLBL = new javax.swing.JLabel();
        popLBL1 = new javax.swing.JLabel();
        viewPopBTN = new javax.swing.JButton();
        viewHipHopBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bckgrnd.setBackground(new java.awt.Color(229, 255, 255));
        bckgrnd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        title.setBackground(new java.awt.Color(204, 204, 255));
        title.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        title.setText("The Music Manager");
        title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        titeLBL.setFont(new java.awt.Font("Prompt", 1, 14)); // NOI18N
        titeLBL.setText("Song title:");

        genreLBL.setFont(new java.awt.Font("Prompt", 1, 14)); // NOI18N
        genreLBL.setText("Song genre:");

        titleTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTBActionPerformed(evt);
            }
        });

        genreDRPDWN.setFont(new java.awt.Font("Prompt", 0, 14)); // NOI18N
        genreDRPDWN.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pop", "Hip-Hop" }));
        genreDRPDWN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreDRPDWNActionPerformed(evt);
            }
        });

        displayHipHopTA.setColumns(20);
        displayHipHopTA.setRows(5);
        jScrollPane1.setViewportView(displayHipHopTA);

        addSongBTN.setBackground(new java.awt.Color(153, 255, 153));
        addSongBTN.setFont(new java.awt.Font("Prompt Bold", 0, 12)); // NOI18N
        addSongBTN.setText("ADD");
        addSongBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addSongBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBTNActionPerformed(evt);
            }
        });

        searchSongBTN.setBackground(new java.awt.Color(204, 204, 255));
        searchSongBTN.setFont(new java.awt.Font("Prompt Bold", 0, 12)); // NOI18N
        searchSongBTN.setText("Search");
        searchSongBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchSongBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSongBTNActionPerformed(evt);
            }
        });

        removeSongBTN.setBackground(new java.awt.Color(255, 102, 102));
        removeSongBTN.setFont(new java.awt.Font("Prompt Bold", 0, 12)); // NOI18N
        removeSongBTN.setText("Remove");
        removeSongBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeSongBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSongBTNActionPerformed(evt);
            }
        });

        rearangeSongBTN.setBackground(new java.awt.Color(255, 204, 102));
        rearangeSongBTN.setFont(new java.awt.Font("Prompt Bold", 0, 12)); // NOI18N
        rearangeSongBTN.setText("Rearange");
        rearangeSongBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rearangeSongBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rearangeSongBTNActionPerformed(evt);
            }
        });

        viewLBL.setFont(new java.awt.Font("Prompt Semibold", 0, 12)); // NOI18N
        viewLBL.setForeground(new java.awt.Color(153, 153, 153));
        viewLBL.setText("View:");

        viewLikedBTN.setBackground(new java.awt.Color(0, 204, 204));
        viewLikedBTN.setFont(new java.awt.Font("Prompt Medium", 0, 12)); // NOI18N
        viewLikedBTN.setText("Liked Playlist");
        viewLikedBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLikedBTNActionPerformed(evt);
            }
        });

        addPopBTN.setBackground(new java.awt.Color(255, 255, 204));
        addPopBTN.setFont(new java.awt.Font("Prompt Medium", 0, 12)); // NOI18N
        addPopBTN.setText("Pop");
        addPopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPopBTNActionPerformed(evt);
            }
        });

        AddHipHiopBTN.setBackground(new java.awt.Color(255, 255, 204));
        AddHipHiopBTN.setFont(new java.awt.Font("Prompt Medium", 0, 12)); // NOI18N
        AddHipHiopBTN.setText("Hip-Hop");
        AddHipHiopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddHipHiopBTNActionPerformed(evt);
            }
        });

        playBTN.setFont(new java.awt.Font("Prompt Bold", 0, 14)); // NOI18N
        playBTN.setText("PLAY Liked");
        playBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBTNActionPerformed(evt);
            }
        });

        pauseBTN.setFont(new java.awt.Font("Prompt Bold", 0, 14)); // NOI18N
        pauseBTN.setText("PAUSE Liked");
        pauseBTN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pauseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBTNActionPerformed(evt);
            }
        });

        exitBTN.setBackground(new java.awt.Color(229, 255, 255));
        exitBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exitBTN.setText("X");
        exitBTN.setBorder(null);
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        displayLikedTA.setColumns(20);
        displayLikedTA.setRows(5);
        jScrollPane2.setViewportView(displayLikedTA);

        displayPopTA.setColumns(20);
        displayPopTA.setRows(5);
        jScrollPane3.setViewportView(displayPopTA);

        popLBL.setFont(new java.awt.Font("Prompt Semibold", 0, 12)); // NOI18N
        popLBL.setForeground(new java.awt.Color(153, 153, 153));
        popLBL.setText("pop:");

        HipHopLBL.setFont(new java.awt.Font("Prompt Semibold", 0, 12)); // NOI18N
        HipHopLBL.setForeground(new java.awt.Color(153, 153, 153));
        HipHopLBL.setText("hip-hop:");

        addLBL.setFont(new java.awt.Font("Prompt Semibold", 0, 12)); // NOI18N
        addLBL.setForeground(new java.awt.Color(51, 51, 51));
        addLBL.setText("Add last song to:");

        popLBL1.setFont(new java.awt.Font("Prompt Semibold", 0, 12)); // NOI18N
        popLBL1.setForeground(new java.awt.Color(153, 153, 153));
        popLBL1.setText("or");

        viewPopBTN.setBackground(new java.awt.Color(0, 204, 204));
        viewPopBTN.setFont(new java.awt.Font("Prompt Medium", 0, 12)); // NOI18N
        viewPopBTN.setText("Pop Playlist");
        viewPopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPopBTNActionPerformed(evt);
            }
        });

        viewHipHopBTN.setBackground(new java.awt.Color(0, 204, 204));
        viewHipHopBTN.setFont(new java.awt.Font("Prompt Medium", 0, 12)); // NOI18N
        viewHipHopBTN.setText("Hip-Hop Playlist");
        viewHipHopBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHipHopBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bckgrndLayout = new javax.swing.GroupLayout(bckgrnd);
        bckgrnd.setLayout(bckgrndLayout);
        bckgrndLayout.setHorizontalGroup(
            bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bckgrndLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(bckgrndLayout.createSequentialGroup()
                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bckgrndLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genreLBL)
                            .addComponent(titeLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bckgrndLayout.createSequentialGroup()
                                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(bckgrndLayout.createSequentialGroup()
                                        .addComponent(playBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(104, 104, 104)
                                        .addComponent(viewLBL)
                                        .addGap(9, 9, 9))
                                    .addComponent(addLBL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bckgrndLayout.createSequentialGroup()
                                        .addComponent(addPopBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(popLBL1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AddHipHiopBTN))
                                    .addComponent(viewLikedBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(title)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bckgrndLayout.createSequentialGroup()
                                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(titleTB)
                                        .addComponent(genreDRPDWN, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pauseBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(bckgrndLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(searchSongBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(addSongBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(removeSongBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rearangeSongBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(150, 150, 150)
                                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewHipHopBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewPopBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(bckgrndLayout.createSequentialGroup()
                        .addGap(698, 698, 698)
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HipHopLBL)
                            .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(popLBL)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)))))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bckgrndLayout.createSequentialGroup()
                    .addGap(282, 282, 282)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(511, Short.MAX_VALUE)))
        );
        bckgrndLayout.setVerticalGroup(
            bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bckgrndLayout.createSequentialGroup()
                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bckgrndLayout.createSequentialGroup()
                        .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titleTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titeLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genreLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genreDRPDWN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(addSongBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchSongBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeSongBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rearangeSongBTN)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bckgrndLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(334, 334, 334)))
                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPopBTN)
                    .addComponent(AddHipHiopBTN)
                    .addComponent(addLBL)
                    .addComponent(popLBL1))
                .addGap(25, 25, 25)
                .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bckgrndLayout.createSequentialGroup()
                        .addComponent(playBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseBTN)
                        .addGap(53, 53, 53))
                    .addGroup(bckgrndLayout.createSequentialGroup()
                        .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewLikedBTN)
                            .addComponent(viewLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewPopBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewHipHopBTN)
                        .addGap(13, 13, 13))))
            .addGroup(bckgrndLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(popLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(HipHopLBL)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
            .addGroup(bckgrndLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bckgrndLayout.createSequentialGroup()
                    .addGap(123, 123, 123)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(193, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bckgrnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bckgrnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewHipHopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHipHopBTNActionPerformed
        // TODO add your handling code here:
        List<Song> hipHopPlaylist = musicManager.getHipHopPlaylist();
        if (hipHopPlaylist.isEmpty()) {
            displayHipHopTA.setText("Hip-Hop playlist is empty.");
            return;
        }

        // Construct the string representation of the Hip-Hop playlist
        StringBuilder hipHopPlaylistDisplay = new StringBuilder();

        // Append the number of songs in the Hip-Hop playlist
        hipHopPlaylistDisplay.append("Number of Songs in Hip-Hop Playlist: ").append(hipHopPlaylist.size()).append("\n");

        // Iterate over the Hip-Hop playlist and append each song's information to the display string
        for (int i = 0; i < hipHopPlaylist.size(); i++) {
            Song song = hipHopPlaylist.get(i);
            hipHopPlaylistDisplay.append(i + 1).append(". ").append(song.getTitle()).append(", ").append(song.getGenre()).append("\n");
        }

        // display the Hip-Hop playlist in the corresponding text area
        displayHipHopTA.setText(hipHopPlaylistDisplay.toString());
    }//GEN-LAST:event_viewHipHopBTNActionPerformed

    private void viewPopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPopBTNActionPerformed
        // TODO add your handling code here:
        List<Song> popPlaylist = musicManager.getPopPlaylist();
        if (popPlaylist.isEmpty()) {
            displayPopTA.setText("Pop playlist is empty.");
            return; // Exit the method if playlist is empty
        }

        // Construct the string representation of the Pop playlist
        StringBuilder popPlaylistDisplay = new StringBuilder();

        // Append the number of songs in the Pop playlist
        popPlaylistDisplay.append("Number of Songs in Pop Playlist: ").append(popPlaylist.size()).append("\n");

        // Iterate over the Pop playlist and append each song's information to the display string
        for (int i = 0; i < popPlaylist.size(); i++) {
            Song song = popPlaylist.get(i);
            // Append the position, song name, and genre to the display string
            popPlaylistDisplay.append(i + 1).append(". ").append(song.getTitle()).append(", ").append(song.getGenre()).append("\n");
        }

        // Display the Pop playlist in the corresponding text area
        displayPopTA.setText(popPlaylistDisplay.toString());
    }//GEN-LAST:event_viewPopBTNActionPerformed

    private void AddHipHiopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddHipHiopBTNActionPerformed
        // TODO add your handling code here:
        if (!lastAddedStack.isEmpty()) {
            // get the last added song from the stack
            Song lastAddedSong = lastAddedStack.pop();

            // add the last added song to hiphop
            musicManager.addHipHopSong(lastAddedSong, displayHipHopTA);
        }
    }//GEN-LAST:event_AddHipHiopBTNActionPerformed

    private void addPopBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPopBTNActionPerformed
        // TODO add your handling code here:
        if (!lastAddedStack.isEmpty()) {
            Song lastAddedSong = lastAddedStack.pop();

            musicManager.addPopSong(lastAddedSong, displayPopTA);
        }

    }//GEN-LAST:event_addPopBTNActionPerformed

    private void viewLikedBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLikedBTNActionPerformed
        // TODO add your handling code here:                                       
        // check if the liked playlist is empty
        if (playlist.isEmpty()) {
            displayLikedTA.setText("liked playlist is empty.");
            return; // exit the method if playlist is empty
        }

        // construct the string representation of the playlist
        StringBuilder likedPlaylistDisplay = new StringBuilder();

        // append the number of songs in the playlist
        likedPlaylistDisplay.append("number of songs: ").append(playlist.size()).append("\n");

        // iterate over the playlist and append each song's information to the display string
        for (int i = 0; i < playlist.size(); i++) {
            Song song = playlist.get(i);
            // append the position, song name, and genre to the display string
            likedPlaylistDisplay.append(i + 1).append(". ").append(song.getTitle()).append(", ").append(song.getGenre()).append("\n");
        }

        // display the playlist in the corresponding text area
        displayLikedTA.setText(likedPlaylistDisplay.toString());

    }//GEN-LAST:event_viewLikedBTNActionPerformed

    private void rearangeSongBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rearangeSongBTNActionPerformed

           // Check if the size of the liked songs is zero
    if (playlist.isEmpty()) {
        displayLikedTA.setText("No songs to rearrange."); // Message if there are no songs to rearrange
        return; // Exit the method
    }

    // Create a priority queue to rearrange
    PriorityQueueImpl priorityQueue = new PriorityQueueImpl();

    // Enqueue songs with their titles and genres
    for (int i = 0; i < playlist.size(); i++) {
        priorityQueue.enqueue(i, playlist.get(i));
    }

    // Dequeue and display songs in the desired order
    StringBuilder rearrangedSongs = new StringBuilder();
    while (!priorityQueue.isEmpty()) {
        Song song = priorityQueue.dequeue();
        rearrangedSongs.append("  ").append(song.getTitle()).append(" - ").append(song.getGenre()).append("\n");
    }

    displayLikedTA.setText(rearrangedSongs.toString());

    // Prompt user input (song name to swap with position)
    String songName = JOptionPane.showInputDialog(this, "Enter the name of the song you want to move:");
    if (songName != null && !songName.isEmpty()) {
        // Find the index of the song in the liked playlist
        int index = -1;
        for (int i = 0; i < playlist.size(); i++) {
            if (playlist.get(i).getTitle().equalsIgnoreCase(songName)) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Song not found.");
            return;
        }

        String positionStr = JOptionPane.showInputDialog(this, "Enter the new Song position :");
        if (positionStr != null && !positionStr.isEmpty()) {
            try {
                int position = Integer.parseInt(positionStr) - 1; // - 1 to convert to 0 index
                if (position < 0 || position >= playlist.size()) {
                    JOptionPane.showMessageDialog(this, "Invalid position.");
                    return;
                }
                // Move the song to the new spot
                Song movedSong = playlist.remove(index);
                playlist.add(position, movedSong);

                // Update display
                rearrangedSongs.setLength(0);
                for (Song song : playlist) {
                    rearrangedSongs.append(song.getTitle()).append(" - ").append(song.getGenre()).append("\n");
                }
                displayLikedTA.setText(rearrangedSongs.toString());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid position. Please enter a valid number.");
            }
        }
    }

    }//GEN-LAST:event_rearangeSongBTNActionPerformed

    private void removeSongBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSongBTNActionPerformed
        // TODO add your handling code here:
        // check if the liked playlist is empty
        if (playlist.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No songs to remove.");
            return;
        }

        String songName = JOptionPane.showInputDialog(this, "What is the song you want removed?:");

        if (songName != null && !songName.isEmpty()) {
            boolean songRemoved = false;

            // find the song
            for (int i = 0; i < playlist.size(); i++) {
                Song song = playlist.get(i);
                if (song.getTitle().equalsIgnoreCase(songName)) {
                    playlist.remove(i); // Remove the song at index i
                    songRemoved = true;

                    // Check if the song is in the Pop playlist and remove it
                    if (musicManager.getPopPlaylist().contains(song)) {
                        musicManager.getPopPlaylist().remove(song);
                    }

                    // Check if the song is in the Hip-Hop playlist and remove it
                    if (musicManager.getHipHopPlaylist().contains(song)) {
                        musicManager.getHipHopPlaylist().remove(song);
                    }
                    break;
                }
            }

            // update the display 
            if (songRemoved) {
                StringBuilder likedSongsDisplay = new StringBuilder();
                for (Song song : playlist) {
                    likedSongsDisplay.append(song.getTitle()).append(" - ").append(song.getGenre()).append("\n");
                }
                displayLikedTA.setText(likedSongsDisplay.toString());
            } else {
                JOptionPane.showMessageDialog(this, "Song '" + songName + "' not found in the liked playlist.");
            }
        }
    }//GEN-LAST:event_removeSongBTNActionPerformed

    private void searchSongBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSongBTNActionPerformed
        // TODO add your handling code here:
        // check if the liked playlist is empty
        if (playlist.isEmpty()) {
            displayLikedTA.setText(" playlist is empty...");
            return;
        }

        String songName = JOptionPane.showInputDialog(this, "Enter the name of the song you want to search:");

        if (songName != null && !songName.isEmpty()) {
            boolean songFound = false;
            String genre = "";
            int position = -1;
            for (int i = 0; i < playlist.size(); i++) {
                Song song = playlist.get(i);
                if (song.getTitle().equalsIgnoreCase(songName)) {
                    songFound = true;
                    genre = song.getGenre();
                    position = i + 1; // + 1 to convert to 0 index
                    break;
                }
            }

            //display result
            if (songFound) {
                String message = " You searched for '" + songName + "'. It is in the " + genre + " genre, and is in the no. " + position + " position of your liked playlist.";
                displayLikedTA.setText(message);
            } else {
                JOptionPane.showMessageDialog(this, "Song not found.");
            }
        }
    }//GEN-LAST:event_searchSongBTNActionPerformed

    private void addSongBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBTNActionPerformed
        // TODO add your handling code here:
        // get inputs from GUI
        String title = titleTB.getText();
        String genre = genreDRPDWN.getSelectedItem().toString();

        // ceate a new Song
        Song newSong = new Song(title, genre);

        // Add the song to the playlist ArrayList
        playlist.add(newSong);

        // add the song to the liked songs playlist
        musicManager.addLikedSong(newSong, genre, displayLikedTA);

        // push the last added song onto the stack, the last song added will be popped into either hip hop or pop,(or neither)
        lastAddedStack.push(newSong);
    }//GEN-LAST:event_addSongBTNActionPerformed

    private void genreDRPDWNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreDRPDWNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genreDRPDWNActionPerformed

    private void titleTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTBActionPerformed

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBTNActionPerformed

    private void playBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBTNActionPerformed
        // play songs in the liked playlist
        if (playlist.isEmpty()) {
            displayLikedTA.setText("Liked playlist is empty.");
            return;
        }

        timer = new Timer(1000, e -> {
            // check if there are more songs to play
            if (currentIndex < playlist.size()) {
                Song song = playlist.get(currentIndex);
                displayLikedTA.append((currentIndex + 1) + ". " + song.getTitle() + "\n");
                currentIndex++;
            } else {
                timer.stop();
                displayLikedTA.append("Repeating in 3 seconds...\n");
                // Create a new timer to repeat the playlist after 3 seconds
                Timer repeatTimer = new Timer(3000, repeatEvt -> {
                    currentIndex = 0; // reset the current index
                    playLikedPlaylist(); // repeat
                });
                repeatTimer.setRepeats(false);
                repeatTimer.start();
            }
        });

        currentIndex = 0; // first song
        timer.start();


    }//GEN-LAST:event_playBTNActionPerformed

    private void pauseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBTNActionPerformed
        // TODO add your handling code here:
        if (timer != null && timer.isRunning()) {
            timer.stop();
            displayLikedTA.setText("Playback stopped.");
        }

    }//GEN-LAST:event_pauseBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicManagerGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddHipHiopBTN;
    private javax.swing.JLabel HipHopLBL;
    private javax.swing.JLabel addLBL;
    private javax.swing.JButton addPopBTN;
    private javax.swing.JButton addSongBTN;
    private javax.swing.JPanel bckgrnd;
    private javax.swing.JTextArea displayHipHopTA;
    private javax.swing.JTextArea displayLikedTA;
    private javax.swing.JTextArea displayPopTA;
    private javax.swing.JButton exitBTN;
    private javax.swing.JComboBox<String> genreDRPDWN;
    private javax.swing.JLabel genreLBL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton pauseBTN;
    private javax.swing.JButton playBTN;
    private javax.swing.JLabel popLBL;
    private javax.swing.JLabel popLBL1;
    private javax.swing.JButton rearangeSongBTN;
    private javax.swing.JButton removeSongBTN;
    private javax.swing.JButton searchSongBTN;
    private javax.swing.JLabel titeLBL;
    private javax.swing.JLabel title;
    private javax.swing.JTextField titleTB;
    private javax.swing.JButton viewHipHopBTN;
    private javax.swing.JLabel viewLBL;
    private javax.swing.JButton viewLikedBTN;
    private javax.swing.JButton viewPopBTN;
    // End of variables declaration//GEN-END:variables
}
